{"tagline":"","body":"## Welcome to GeekTool Scripts\r\nOn this Page you can find a couple of my Desktop Scripts that can be used with [GeekTool](http://itunes.apple.com/us/app/geektool/id456877552) or [NerdTool](http://mutablecode.com/apps/nerdtool) or [Conky](http://conky.sourceforge.net/).\r\n\r\nEssentially, these are small shell scripts that display bits of information: Current free HDD space, Temperature, Weather, etc.\r\n\r\nThe vast majority is text-only, but a couple of scripts can also save save image files that then can be displayed.\r\n\r\nTo use the scripts:\r\n\r\n1. Download the compressed file (or clone the repo)\r\n2. Change paths that are hard-coded in the files (needed for things like images)\r\n3. Change certain info contained in the file (eg. IP Addresses or URLs)\r\n4. Run the scripts. Their output will tell you what to do.\r\n\r\n## The Battery script\r\nThe `battery.sh` script has a bunch of different options. Most notable are `graphical` and `info`. You can use the `battery.png` image to give the graphical representation a nice border...\r\n![Battery Graphical](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/battery_graphical.png)\r\n![Battery Info](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/battery_info.png)\r\n\r\n## Your age in seconds\r\nThe script `seconds_from_birth.sh` contains comments how you have to format your birthday for it to work correctly.\r\nHere is an example output:\r\n![Age in Seconds](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/age_in_seconds.png)\r\n\r\n## Analog ASCII Clock\r\nThe script `clock_ascii.pl` takes a width and a height parameter and outputs a clock in ASCII Characters.\r\nAt first it looks really crude, but if you make play with width, height and font-size, it can look quite compelling.\r\n![Clock ASCII](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/clock_ascii.png)\r\n\r\n## Gmail Script\r\nThe `gmail.sh` script uses OAUTH 2.0 to connect to google and all passwords are stored in the OS X Keychain. It has an `init` parameter with which it has to be run once from the Terminal.\r\nAfterwards it can be used in GeekTool with the `getmail` parameter.\r\n![Gmail Mail](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/gmail_getmail.png)\r\n\r\n## Calendar\r\nThe `calendar.sh` has a multitude of options. Use `-c` to have the current day colored, `-m` to have the calendar start on mondays. If you want to influence the coloring and are not too comfortable with editing the script, use the `xyz_gap` and `xyz_date` options and create two scripts: one does show the current date, the other the rest of the calendar. This way, you can even use different fonts for the current date.\r\n![Calendar 1](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/calendar_1.png)\r\n![Calendar 2](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/calendar_2.png)\r\n![Calendar 3](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/calendar_3.png)\r\n![Calendar 4](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/calendar_4.png)\r\n\r\n## Fuzzy Time\r\nThe `fuzzytime.php` script outputs the time in a more \"spoken\" way.\r\n![Fuzzy Time](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/fuzzy_time.png)\r\n\r\n## Clock Images\r\nThe `clock_images.php` script can be run with different options do output a \"station clock\" like image that can include, seconds, minutes, hours and clock hands. Each Option creates it's own image.\r\nIt's worth looking into the source - there you can change the default colors (default is all white with the current hour blue). Lay multiple images over one another to have a nice GeekTool Clock or stack them inside one another (hours->minutes->seconds) to have a \"ring\" clock.\r\nIf you don't mind the CPU cycles, set the `seconds` option as well as the output of the resulting image to refresh every second - this produces a \"ticking\" clock image.\r\n![Ring Clock](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/clock_images.png)\r\n\r\n## Mac Temperatures\r\nThe `temperatures.sh` Script uses the `tempmonitor` binary from [Temperature Monitor](http://www.bresink.com/osx/0TemperatureMonitor/download.php5). To get and use it, follow the comment instructions inside the script.\r\nIn order to see any output in GeekTool, be sure to set the output encoding to ASCII.\r\n![Temperatures](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/temperatures.png)\r\n\r\n## HDD Space\r\nThe `hddspace.sh` script can display the information either in one package, or separated by volumes and sizes. This allows for different colors.\r\n![HDD Space One](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/hddspace_one.png)\r\n![HDD Space Colors](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/hddspace_colors.png)\r\n\r\n## Network Access\r\nThe `network.sh` script can display, which services are currently connecting to the internet, \r\nyour IP Addresses in horizontal and vertical form and a list of nearby WLAN networks.\r\n![Network Inet Access](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/network_inet_access.png)\r\n![Network IPs](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/network_ips.png)\r\n![Network Airport List](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/network_airports.png)\r\n\r\n## The Ribbon\r\nThe Ribbons are two images (one with an apple, one without) that can be placed \"on top\" of other windows and can look quite nice in the upper left corner.\r\n![Ribbon Apple](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/ribbon_apple.png)\r\n\r\n## How to set up your own Gmail API Application\r\nIf you do not trust the gmail.sh script provided, or if you are just curious and want to tinker around:\r\nhere is how you can set up your own \\\"Application\\\" for the Google API.\r\n\r\n1. Got to the [Google API Console](https://code.google.com/apis/console/)\r\n![Google API Console](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/gmail_howto_1_google_api_console.png)\r\n2. Choose \\\"API Access\\\" in the left hand column and the hit the big blue button\r\n![Create OAuth Application](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/gmail_howto_2_create_oauth_application.png)\r\n3. Enter \\\"Branding Information\\\". This consists of an Application Name and an optional image\r\n![Branding Information](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/gmail_howto_3_create_branding_information.png)\r\n4. Create a client ID. Different set-ups are possible - for GeekTool purposes, choose \\\"Offline\\\"\r\n![Create Client ID](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/gmail_howto_4_create_client_id.png)\r\n5. Now you are good to go! You should be presented with an overview page that includes your credentials: Client ID, Client Secret and a Redirect URI\r\n![Credentials](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/gmail_howto_5_credentials.png)\r\n6. When a user now tries to use your application, the will have to open a webpage and will be presented with a dialog like the one below\r\n![Permission Dialog](https://github.com/frostrubin/GeekTool-Scripts/raw/master/example_screenshots/gmail_howto_6_permission_example.png)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"GeekTool Scripts"}